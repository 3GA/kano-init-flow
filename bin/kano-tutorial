#!/usr/bin/env python

# kano-tutorial
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
from gi.repository import Gtk, Gdk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.append(dir_path)

from kano.gtk3.apply_styles import apply_styles_to_screen
from kano.utils import is_number

from kano_tutorial.screens import Screen1, Screen2, Screen3, Screen4
from kano_tutorial.drag_and_drop import DragAndDrop
from kano_tutorial.paths import css_dir

refs = {
    0: Screen1,
    1: Screen2,
    2: Screen3,
    3: Screen4,
    4: DragAndDrop,
}


class MainWindow(Gtk.Window):

    def __init__(self, stage=0):

        apply_styles_to_screen()
        specific_css = Gtk.CssProvider()
        css_path = os.path.join(css_dir, "kano-tutorial.css")
        specific_css.load_from_path(css_path)
        screen = Gdk.Screen.get_default()
        styleContext = Gtk.StyleContext()
        styleContext.add_provider_for_screen(screen, specific_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)

        # Create main window
        Gtk.Window.__init__(self, title="Kano")
        self.fullscreen()
        self.connect("delete-event", Gtk.main_quit)
        self.goto(stage)

    def goto(self, stage):
        self.clear_win()
        refs[stage](self)

    def clear_win(self):
        for i in self.get_children():
            self.remove(i)


def main():
    stage_number = 0

    if len(sys.argv) == 2:
        text = sys.argv[1]

        if not text is None and is_number(text):
            stage_number = int(text)

    win = MainWindow(stage_number)
    Gtk.main()


if __name__ == '__main__':
    main()
