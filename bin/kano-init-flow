#!/usr/bin/env python

# kano-init-flow
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#



#
# FIXME: An extremely nasty, but at this point the only effective way of
# making sure that an exception in this program will not cause the WIFI
# loop in the bootflow. We should ged rid of this and refactor as soon as
# we can drop support of the Beta-1.2.1 China image.
#
try:
    import os
    import sys
    from gi.repository import Gtk, Gdk

    if __name__ == '__main__' and __package__ is None:
        dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
        if dir_path != '/usr':
            sys.path.insert(1, dir_path)

    from kano.gtk3.apply_styles import apply_common_to_screen
    from kano.gtk3.application_window import ApplicationWindow
    from kano.utils import enforce_root
    from kano_init_flow.first_screen import FirstScreen
    from kano_init_flow.audio_screen import AudioScreen
    from kano_init_flow.reboot_screen import RebootScreen
    from kano_init_flow.paths import css_dir


    # only for test:
    from kano_init_flow.internet_screen import InternetScreen
    from kano_init_flow.internet_screen import NoInternetScreen
    from kano_init_flow.internet_screen import OfflineScreen

    from kano_init_flow.settings_intro_screen import SettingsIntroScreen
    from kano_init_flow.keyboard_screen import KeyboardScreen

    from kano_init_flow.audio_screen import SeeTheLightScreen
    from kano_init_flow.audio_screen import BlueCableScreen
    from kano_init_flow.audio_screen import CheckTheGPIOScreen
    from kano_init_flow.audio_screen import AnalogueScreen
    from kano_init_flow.audio_screen import TvSpeakersScreen

    from kano_init_flow.display_screen import DisplayScreen
    from kano_init_flow.display_screen import DisplayTutorial

    screens = {
        'first': FirstScreen,
        'keyb' : KeyboardScreen,
        'net'  : InternetScreen,
        'net_no'   : NoInternetScreen,
        'net_off'  : OfflineScreen,
        'si'   : SettingsIntroScreen,
        'aud'  : AudioScreen,
        'aud_see'  : SeeTheLightScreen,
        'aud_blue' : BlueCableScreen,
        'aud_gpio' : CheckTheGPIOScreen,
        'aud_ana'  : AnalogueScreen,
        'aud_tv'   : TvSpeakersScreen,
        'disp'   : DisplayScreen,
        'disp_tut'   : DisplayTutorial,

    }

    enforce_root('Please run it as root / sudo user!')

    # Window class
    class MainWindow(ApplicationWindow):

        def __init__(self, first_screen, reboot=False):
            # Create main window
            ApplicationWindow.__init__(self, title="Kano", width=2, height=2)

            apply_common_to_screen()
            specific_css = Gtk.CssProvider()
            css_path = os.path.join(css_dir, "kano-init-flow.css")
            specific_css.load_from_path(css_path)
            screen = Gdk.Screen.get_default()
            styleContext = Gtk.StyleContext()
            styleContext.add_provider_for_screen(screen, specific_css,
                                            Gtk.STYLE_PROVIDER_PRIORITY_USER)
            # We need this for backwards compatibility
            self.need_reboot = reboot
            # This needs to be here to get the resizing correct for the screens
            self.show_all()
            # This is to get position right when the window resizes
            self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)

            self._bg = self._initialise_background()
            self._bg_overlay = Gtk.Overlay()
            self._bg_overlay.add(self._bg)
            self._main_widget = None
            ApplicationWindow.set_main_widget(self, self._bg_overlay)

            #self.fullscreen()
            self.maximize()

            # Start on first_screen
            first_screen(self)

        def set_main_widget(self, widget):
            if self._main_widget:
                msg = "There's a main widget already. Remove it first."
                raise RuntimeError(msg)

            widget.set_valign(Gtk.Align.CENTER)
            widget.set_halign(Gtk.Align.CENTER)
            self._main_widget = widget
            self._bg_overlay.add_overlay(widget)

        def remove_main_widget(self):
            self._bg_overlay.remove(self._main_widget)
            self._main_widget = None

        def _get_aspect_ratio(self):
            scr = self.get_screen()
            aspect = float(scr.width()) / scr.height()

            if abs(aspect - 16./9) < abs(aspect - 4./3):
                return (16, 9)

            return (4, 3)

        def _initialise_background(self):
            aspect = self._get_aspect_ratio()
            fname = "kanux-background-{}-{}.png".format(aspect[0], aspect[1])
            bg_path = "/usr/share/kano-desktop/wallpapers/{}".format(fname)

            return Gtk.Image.new_from_file(bg_path)

        def clear_win(self):
            self.remove_main_widget()

        # hacky fix - reset height allocation for the window
        def reset_allocation(self):

            allocation = self.get_allocation()
            allocation.width = 1
            allocation.height = 1
            self.size_allocate(allocation)

        # hacky fix - shrink height of window
        def shrink(self):
            if self._main_widget:
                self._main_widget.set_size_request(590, 100)

        def exit_flow(self):
            if self.need_reboot:
                self.clear_win()
                RebootScreen(self)
            else:
                # Init flow completed
                sys.exit(0)

    def main(first_screen, reboot=False):
        MainWindow(first_screen, reboot)
        Gtk.main()

    if __name__ == '__main__':

        first_screen = FirstScreen
        reboot_at_end = False
        # Check for possible arguments
        # We need this for backwards compatibility 1.3.1
        if len(sys.argv) == 2:
            first_screen = AudioScreen
            reboot_at_end = True
        elif len(sys.argv) == 3:
            if sys.argv[2] in screens:
                first_screen = screens[sys.argv[2]]
            else:
                print "usage: sudo kano-init-flow test <screen>"
                print " <screen> is one of " + str(screens.keys())
                raise Exception("unknown screen")

        main(first_screen, reboot_at_end)
except:
    import traceback
    from kano.logging import logger
    exc = traceback.format_exc().splitlines()
    for line in exc:
        logger.error(line)

    sys.exit(0)
