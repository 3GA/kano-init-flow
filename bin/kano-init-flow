#!/usr/bin/env python

# kano-init-flow
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
from gi.repository import Gtk, Gdk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.gtk3.apply_styles import apply_styles_to_screen
from kano.gtk3.application_window import ApplicationWindow
from kano.utils import is_number, enforce_root
from kano_init_flow.first_screen import FirstScreen
from kano_init_flow.internet_screen import InternetScreen
from kano_init_flow.update_screen import UpdateScreen
from kano_init_flow.settings_intro_screen import SettingsIntroScreen
from kano_init_flow.display_screen import DisplayScreen
from kano_init_flow.audio_screen import AudioScreen
from kano_init_flow.unlock_screen import UnlockScreen
from kano_init_flow.keyboard_screen import KeyboardScreen
from kano_init_flow.reboot_screen import RebootScreen
from kano_init_flow.paths import css_dir

refs = {
    0: FirstScreen,
    1: InternetScreen,
    2: UpdateScreen,
    3: SettingsIntroScreen,
    4: DisplayScreen,
    5: AudioScreen,
    6: UnlockScreen,
    7: KeyboardScreen,
    8: RebootScreen,
}

enforce_root('Please run it as root / sudo user!')


# Window class
class MainWindow(ApplicationWindow):

    def __init__(self, stage=0):

        apply_styles_to_screen()
        specific_css = Gtk.CssProvider()
        css_path = os.path.join(css_dir, "kano-init-flow.css")
        specific_css.load_from_path(css_path)
        screen = Gdk.Screen.get_default()
        styleContext = Gtk.StyleContext()
        styleContext.add_provider_for_screen(screen, specific_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)

        # Create main window
        # Try without the ApplicationWindow class
        ApplicationWindow.__init__(self, title="Kano", width=2, height=2)

        # This needs to be here to get the resizing correct for the screens
        self.show_all()

        # This is to get position right when the window resizes
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.goto(stage)

    def goto(self, stage):
        refs[stage](self)

    def clear_win(self):
        self.remove_main_widget()

    # hacky fix - reset height allocation for the window
    def reset_allocation(self):

        allocation = self.get_allocation()
        allocation.width = 1
        allocation.height = 1
        self.size_allocate(allocation)

    # hacky fix - shrink height of window
    def shrink(self):
        self.resize(590, 100)


def main():
    stage_number = 0

    if len(sys.argv) == 2:
        text = sys.argv[1]

        if not text is None and is_number(text):
            stage_number = int(text)

    MainWindow(stage_number)
    Gtk.main()


if __name__ == '__main__':
    main()
